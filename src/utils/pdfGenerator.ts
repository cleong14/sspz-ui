import jsPDF from 'jspdf'
import { NistControl, SecurityTool } from '@/types/nist'
import { SECURITY_TOOLS } from '@/utils/securityTools'

interface SSPFormData {
  systemName: string
  systemVersion: string
  securityFramework: string
  securityBaseline: string
  selectedTools: SecurityTool[]
  controls: NistControl[]
  username: string
}

export const generateSSPPDF = (formData: SSPFormData): void => {
  const doc = new jsPDF()
  const pageWidth = doc.internal.pageSize.getWidth()
  const pageHeight = doc.internal.pageSize.getHeight()
  const margin = 20
  let yPosition = margin

  // Helper function to add text with word wrapping
  const addText = (text: string, fontSize = 12, isBold = false) => {
    doc.setFontSize(fontSize)
    if (isBold) {
      doc.setFont('helvetica', 'bold')
    } else {
      doc.setFont('helvetica', 'normal')
    }

    const lines = doc.splitTextToSize(text, pageWidth - 2 * margin)

    // Check if we need a new page
    if (yPosition + lines.length * fontSize * 0.35 > pageHeight - margin) {
      doc.addPage()
      yPosition = margin
    }

    doc.text(lines, margin, yPosition)
    yPosition += lines.length * fontSize * 0.35 + 5
  }

  // Helper function to add a new page if needed
  const checkPageBreak = (requiredSpace = 30) => {
    if (yPosition + requiredSpace > pageHeight - margin) {
      doc.addPage()
      yPosition = margin
    }
  }

  // Title
  addText('System Security Plan (SSP)', 20, true)
  yPosition += 10

  // System Information Section
  addText('System Information', 16, true)
  addText(`System Name: ${formData.systemName || 'Not specified'}`)
  addText(`System Version: ${formData.systemVersion || 'Not specified'}`)
  addText(
    `Security Framework: ${formData.securityFramework || 'Not specified'}`
  )
  addText(`Security Baseline: ${formData.securityBaseline || 'Not specified'}`)

  // Selected Security Tools
  if (formData.selectedTools.length > 0) {
    const toolNames = formData.selectedTools
      .map((toolId) => SECURITY_TOOLS[toolId]?.name || toolId)
      .join(', ')
    addText(`Selected Security Tools: ${toolNames}`)
  } else {
    addText('Selected Security Tools: None')
  }

  yPosition += 10

  // Controls Section
  if (formData.controls.length > 0) {
    addText(
      `Security Controls (${formData.controls.length} controls)`,
      16,
      true
    )
    yPosition += 5

    formData.controls.forEach((control, index) => {
      checkPageBreak(60)

      // Control header
      addText(`${index + 1}. ${control.id} - ${control.title}`, 14, true)

      // Control details
      addText(`Family: ${control.family}`)
      addText(`Priority: ${control.priority || 'Not specified'}`)

      // Baseline information
      const baselines = []
      if (control.baselines?.security?.high) baselines.push('High')
      if (control.baselines?.security?.moderate) baselines.push('Moderate')
      if (control.baselines?.security?.low) baselines.push('Low')
      addText(
        `Baselines: ${baselines.length > 0 ? baselines.join(', ') : 'None'}`
      )

      // Tools
      if (control.tools && control.tools.length > 0) {
        const controlToolNames = control.tools
          .map((toolId) => SECURITY_TOOLS[toolId]?.name || toolId)
          .join(', ')
        addText(`Associated Tools: ${controlToolNames}`)
      }

      // Description
      if (control.description) {
        addText('Description:')
        addText(control.description, 10)
      }

      yPosition += 10
    })
  } else {
    addText('No security controls selected or available.', 12)
  }

  // Footer
  checkPageBreak(30)
  yPosition += 20
  addText(`Generated on: ${new Date().toLocaleDateString()}`, 10)
  addText(`Generated by: ${formData.username}`, 10)
  addText('Generated using SSP Generator Application', 10)

  // Save the PDF
  const fileName = `SSP_${formData.systemName || 'System'}_${new Date().toISOString().split('T')[0]}.pdf`
  doc.save(fileName)
}
